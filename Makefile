##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.0.0] date: [Tue Apr 16 00:40:52 CST 2019]
##########################################################################################################################

ARM_TOOLCHAIN_BASEPATH = /PATH/TO/YOUR_TOOLCHAIN

######################################
# target
######################################
TARGET = stm32_port_freertos_v10.2


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Src/drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Src/os/FreeRTOS/v10.2.0/portable/MemMang/heap_4.c \
Src/os/FreeRTOS/v10.2.0/portable/GCC/ARM_CM4_MPU/port.c \
Src/tests/hardware/stm32f4xx/stm32f4xx_it.c \
Src/tests/hardware/stm32f4xx/stm32f4xx_hal_msp.c \
Src/tests/hardware/stm32f4xx/stm32f4xx_hal_timebase_tim.c \
Src/tests/hardware/stm32f4xx/stm32f4xx_hal_config.c \
Src/tests/hardware/stm32f4xx/system_stm32f4xx.c


# ASM sources
ASM_SOURCES = \
Src/tests/hardware/stm32f4xx/startup_stm32f446xx.s


EXTRA_BINPATH  = $(ARM_TOOLCHAIN_BASEPATH)/bin
EXTRA_BINPATH2 = $(ARM_TOOLCHAIN_BASEPATH)/libexec/gcc/arm-none-eabi/14.2.1
EXTRA_BINPATH3 = $(ARM_TOOLCHAIN_BASEPATH)/arm-none-eabi/bin

# The gcc compiler bin path can be either defined in make command via
# either it can be added to the PATH environment variable.
export PATH := $(EXTRA_BINPATH):$(EXTRA_BINPATH2):$(EXTRA_BINPATH3):$(PATH)

EXTRA_LIBPATH = $(ARM_TOOLCHAIN_BASEPATH)/arm-none-eabi/lib
EXTRA_LIBPATH2 = $(ARM_TOOLCHAIN_BASEPATH)/libexec/gcc/arm-none-eabi/14.2.1
EXTRA_LIBPATH3 = $(ARM_TOOLCHAIN_BASEPATH)/lib/gcc/arm-none-eabi/14.2.1
export LD_LIBRARY_PATH := $(EXTRA_LIBPATH):$(EXTRA_LIBPATH2):$(EXTRA_LIBPATH3):$(LD_LIBRARY_PATH)

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
DUMP = $(PREFIX)objdump
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# Compile Flags
#######################################
# cpu
CPU = -march=armv7e-m+fp  -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F446xx 


TOOLCHAIN_INCLUDES = \
  -I$(ARM_TOOLCHAIN_BASEPATH)/lib/gcc/arm-none-eabi/14.2.1/include \
  -I$(ARM_TOOLCHAIN_BASEPATH)/arm-none-eabi/include

# AS includes
AS_INCLUDES = 


# C includes
C_INCLUDES =  \
  -ISrc/drivers/STM32F4xx_HAL_Driver/Inc \
  -ISrc/drivers/STM32F4xx_HAL_Driver/Inc/Legacy \
  -ISrc/drivers/CMSIS/Device/ST/STM32F4xx/Include \
  -ISrc/drivers/CMSIS/Include \
  -ISrc/os/FreeRTOS/v10.2.0/include \
  -ISrc/os/FreeRTOS/v10.2.0/portable/GCC/ARM_CM4_MPU \
  -IInc/tests/FreeRTOS/v10.2.0 \
  -IInc/tests/hardware/stm32f4xx \
  $(TOOLCHAIN_INCLUDES) 


#### ------------------------------------------------------------------
#### ---- different files & paths for unit test, integration test -----
#### ------------------------------------------------------------------
ifeq ($(UNIT_TEST), yes)
    C_SOURCES += \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_pxPortInitialiseStack.c \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_prvRestoreContextOfFirstTask.c \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortPendSVHandler.c   \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortSVCHandler.c      \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_xPortStartScheduler.c  \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_xPortRaisePrivilege.c  \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortEnterCritical.c   \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortSysTickHandler.c  \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortStoreTaskMPUSettings.c  \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortSuppressTicksAndSleep.c \
        Src/tests/unit/FreeRTOS/portable/ARM_CM4_MPU/test_vPortYield.c  \
        Src/tests/unit/Unity/src/unity.c \
        Src/tests/unit/Unity/extras/fixture/src/unity_fixture.c \
        Src/tests/unit/FreeRTOS/test_runner.c \
        Src/tests/unit/test_entry.c
    C_INCLUDES += \
        -ISrc/tests/unit/Unity/src \
        -ISrc/tests/unit/Unity/extras/fixture/src
    C_DEFS += -DUNIT_TEST
else
    ifeq ($(INTEGRATION_TEST), yes)
        C_SOURCES += \
            Src/os/FreeRTOS/v10.2.0/croutine.c      \
            Src/os/FreeRTOS/v10.2.0/event_groups.c  \
            Src/os/FreeRTOS/v10.2.0/list.c          \
            Src/os/FreeRTOS/v10.2.0/queue.c         \
            Src/os/FreeRTOS/v10.2.0/stream_buffer.c \
            Src/os/FreeRTOS/v10.2.0/tasks.c         \
            Src/os/FreeRTOS/v10.2.0/timers.c
        C_SOURCES += \
            Src/tests/integration/FreeRTOS/test_entry.c  \
            Src/tests/integration/FreeRTOS/port/stm32f446.c \
            Src/tests/integration/FreeRTOS/nestISR.c     \
            Src/tests/integration/FreeRTOS/integer.c     \
            Src/tests/integration/FreeRTOS/dynamic_case1.c     \
            Src/tests/integration/FreeRTOS/dynamic_case2.c     \
            Src/tests/integration/FreeRTOS/block_time.c        \
            Src/tests/integration/FreeRTOS/queue_case1.c       \
            Src/tests/integration/FreeRTOS/queue_case2.c       \
            Src/tests/integration/FreeRTOS/queue_case3.c       \
            Src/tests/integration/FreeRTOS/semphr_bin_case1.c  \
            Src/tests/integration/FreeRTOS/semphr_bin_case2.c  \
            Src/tests/integration/FreeRTOS/semphr_cnt.c   \
            Src/tests/integration/FreeRTOS/mutex_case1.c  \
            Src/tests/integration/FreeRTOS/recur_mutex.c  \
            Src/tests/integration/FreeRTOS/notify.c       \
            Src/tests/integration/FreeRTOS/sw_timer.c     \
            Src/tests/integration/FreeRTOS/stack_ovfl_chk.c     \
            Src/tests/integration/FreeRTOS/test_runner.c
		C_INCLUDES += \
			-IInc/tests/integration/FreeRTOS
        C_DEFS += -DINTEGRATION_TEST
    endif #### end of INTEGRATION_TEST
endif #### end of UNIT_TEST


# compile gcc flags
CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -Wint-to-pointer-cast
ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif
# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = Src/tests/hardware/stm32f4xx/STM32F446RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).text $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR)/%.text: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(DUMP) -Dh $< > $@

$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)



#######################################
# execute/debug in the tests
#######################################

dbg_server:
	@openocd --search /usr/share/openocd/scripts \
		--file board/st_nucleo_f4.cfg \
		--file interface/stlink.cfg \
		--command init --command "reset init"

dbg_client:
	## @gdb-multiarch -x ./test_utility.gdb
	@arm-none-eabi-gdb -x ./test_utility.gdb

#######################################
# help documentation
#######################################
help:
	@echo "                                                      ";
	@echo " ---------------- Help Documentation -----------------";
	@echo "                                                      ";
	@echo " Options for building image, running, and debugging   ";
	@echo "                                                      ";
	@echo " To build test image, be sure to speficy toolchain base";
	@echo " path for your target board, currently supported CPUs :";
	@echo "                                                      ";
	@echo "   ARM_TOOLCHAIN_BASEPATH=/PATH/TO/YOUR_TOOLCHAIN     ";
	@echo "                                                      ";
	@echo "                                                      ";
	@echo " * make UNIT_TEST=yes                                 ";
	@echo "   Build image to run unit tests.                     ";
	@echo "                                                      ";
	@echo " * make INTEGRATION_TEST=yes                          ";
	@echo "   Build image to run integration tests.              ";
	@echo "                                                      ";
	@echo " * make dbg_server ";
	@echo "   launch debug server, we use OpenOCD (v0.10.0) here ";
	@echo "   . Note that superuser permission would be required ";
	@echo "   when running openOCD, the command differs & depends";
	@echo "   on your working Operating System.                  ";
	@echo "                                                      ";
	@echo " * make dbg_client                                    ";
	@echo "   launch GDB client to load image, set breakpoints,  ";
	@echo "   watchpoints for execution. We use gdb-multiarch    ";
	@echo "   (v7.7.1 or later) at here.                         ";
	@echo "                                                      ";
	@echo " * make clean                                         ";
	@echo "   clean up the built image                           ";
	@echo "                                                      ";
	@echo "                                                      ";


# *** EOF ***
